#toolchain.mfu - mftk - GPLV3, copyleft 2019 Raphael Outhier;

#----------------------------------------------------------- prerequisites check

#If the target was not provided, fail;
$(eval $(call REQ_DEF_VAR,toolchain.target,toolchain))

#--------------------------------------------------------------------------- log

#Display the name of the entry architecture;
$(info [toolchain] entering : ($(toolchain.target)))

#---------------------------------------------------------------- variables init

#All variables updated by the script are reset;
toolchain.type :=
$(toolchain.prefix)CC :=
$(toolchain.prefix)LD :=
$(toolchain.prefix)AR :=
$(toolchain.prefix)OC :=
$(toolchain.prefix)OD :=
$(toolchain.prefix)RE :=
$(toolchain.prefix)CFLAGS :=
$(toolchain.prefix)LDFLAGS :=

#--------------------------------------------------------------- local variables

#Our curent directory;
toolchain.cdir := $(dir $(lastword $(MAKEFILE_LIST)))

#--------------------------------------------------------------- cross make call

#Cross make is used, with the arch environment;
$(eval $(call mftk.utility.define,cross_make,environment,arch))

#Provide the external directory;
$(eval $(call mftk.utility.define,cross_make,directory,$(toolchain.cdir).))

#Transfer the target;
$(eval $(call mftk.utility.define,cross_make,target,$(toolchain.target)))

#Call cross make;
$(eval $(call mftk.utility.execute,cross_make))

#---------------------------------------------------------- arch variables check

#Arch makefiles must have defined the toolchain type;
ifndef toolchain.type
$(error makefiles did not define the toolchain type)
endif

#---------------------------------------------------------- toolchain definition

#include the toolchain file, that will define all toolchain related variables;
include $(toolchain.cdir)toolchains_list.mk

#-------------------------------------------------------------- toolchain checks

#arch makefiles must define the toolchain, namely :
# - CC : the C compiler;
# - LD : the elf linker;
# - AR : the elf archiver;
# - OC : (objcopy) the elf copier;
# - OD : (objdump) the elf dumper;
# - RD : (readelf) the elf reader;
#All names can be prefixed, by defining toolchain.prefix

ifndef $(toolchain.prefix)CC
$(error the toolchain makefile did not define $(toolchain.prefix)CC (C compiler))
endif

ifndef $(toolchain.prefix)LD
$(error the toolchain makefile did not define $(toolchain.prefix)LD (elf linker))
endif

ifndef $(toolchain.prefix)AR
$(error the toolchain makefile did not define $(toolchain.prefix)AR (archiver))
endif

ifndef $(toolchain.prefix)OC
$(error the toolchain makefile did not define $(toolchain.prefix)OC (objcopy))
endif

ifndef $(toolchain.prefix)OD
$(error the toolchain makefile did not define $(toolchain.prefix)OD (objdump))
endif

ifndef $(toolchain.prefix)RE
$(error the toolchain makefile did not define $(toolchain.prefix)RE (readelf))
endif

#----------------------------------------------------------------------- cleanup

undefine toolchain.cdir
undefine toolchain.type

#--------------------------------------------------------------------------- log
$(info [toolchain] leaving)

